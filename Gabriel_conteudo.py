import streamlit as st
import io
import contextlib

# Fun√ß√£o para interpretar mensagens de erro
def interpretar_erro(e):
    if isinstance(e, SyntaxError):
        return "Erro de sintaxe. Verifique par√™nteses ou aspas."
    elif isinstance(e, NameError):
        return "Vari√°vel ou fun√ß√£o n√£o definida."
    elif isinstance(e, ZeroDivisionError):
        return "Divis√£o por zero."
    elif isinstance(e, TypeError):
        return "Erro de tipo."
    else:
        return f"Erro desconhecido: {str(e)}"

# P√°gina de estudos com conte√∫dos b√°sicos
def pagina_estudos(nome):
    st.title(f'Bem-vindo(a), {nome} √† sua Jornada Python!')
    st.header('üìò Introdu√ß√£o ao Python')

    # LGPD - no√ß√µes iniciais sobre prote√ß√£o de dados
    with st.expander("No√ß√µes B√°sicas da LGPD"):
        st.markdown("""
        A **LGPD** regula dados pessoais no Brasil. Empresas devem proteger esses dados.

        - Dado pessoal: identifica a pessoa
        - Princ√≠pios: finalidade, necessidade, seguran√ßa
        - Direitos: acessar, corrigir, excluir, revogar
        """)

    # Aula sobre strings e m√©todos b√°sicos
    with st.expander("1. Strings"):
        st.markdown("""
        ```python
        nome = "Jo√£o"
        print(nome.upper())
        ```
        """)
        entrada = st.text_input("Digite uma palavra:")
        if entrada:
            st.write(f"Mai√∫sculas: {entrada.upper()}")
            st.write(f"Min√∫sculas: {entrada.lower()}")
            st.write(f"N√∫mero de caracteres: {len(entrada)}")

    # Aula de operadores matem√°ticos
    with st.expander("2. Operadores Aritm√©ticos"):
        num1 = st.number_input("N√∫mero 1", value=0)
        num2 = st.number_input("N√∫mero 2", value=0)
        st.write(f"Soma: {num1 + num2}")
        st.write(f"Subtra√ß√£o: {num1 - num2}")
        st.write(f"Multiplica√ß√£o: {num1 * num2}")
        if num2 != 0:
            st.write(f"Divis√£o: {num1 / num2}")
        else:
            st.write("Divis√£o por zero n√£o √© permitida.")

    # Execu√ß√£o de c√≥digo com print()
    with st.expander("3. Pratique com print()"):
        user_code = st.text_area("Digite seu c√≥digo aqui:")
        if st.button("Executar c√≥digo"):
            if "print" in user_code:
                try:
                    user_code = user_code.strip()
                    if user_code.count('"') % 2 != 0 or user_code.count("'") % 2 != 0:
                        st.error("Aspas n√£o fechadas.")
                    elif user_code.count('(') != user_code.count(')'):
                        st.error("Par√™nteses n√£o fechados.")
                    else:
                        f = io.StringIO()
                        with contextlib.redirect_stdout(f):
                            exec(user_code, {"__builtins__": {"print": print}})
                        output = f.getvalue()
                        st.code(output)
                except Exception as e:
                    st.error(f"Erro: {e}")
                    st.info(interpretar_erro(e))
            else:
                st.warning("Use print().")

    # Mini calculadora com c√≥digo livre
    with st.expander("4. Calculadora com c√≥digo"):
        conta = st.text_area("Digite sua conta Python aqui:", key="conta")
        if st.button("Calcular"):
            if "print" in conta:
                try:
                    f = io.StringIO()
                    with contextlib.redirect_stdout(f):
                        exec(conta, {"__builtins__": {"print": print}})
                    output = f.getvalue()
                    st.code(output)
                except Exception as e:
                    st.error(f"Erro: {e}")
                    st.info(interpretar_erro(e))
            else:
                st.warning("Use print().")

    # Conceitos b√°sicos de matem√°tica
    with st.expander("5. Matem√°tica B√°sica"):
        st.markdown("""
        Opera√ß√µes b√°sicas:

        - Soma: `+`
        - Subtra√ß√£o: `-`
        - Multiplica√ß√£o: `*`
        - Divis√£o: `/`
        - Pot√™ncia: `**`
        """)

    # No√ß√µes iniciais de estat√≠stica
    with st.expander("6. Estat√≠stica B√°sica"):
        st.markdown("""
        - M√©dia: soma dos valores / quantidade
        - Moda: valor que mais se repete
        - Mediana: valor central da lista
        """)

    # Navega√ß√£o entre p√°ginas
    if st.button("Ir para a Prova"):
        st.session_state.page = 'prova'
        st.rerun()
    elif st.button("Sair"):
        st.session_state.page = 'login'
        st.rerun()
